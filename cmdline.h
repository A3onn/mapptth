/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "mapptth"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "mapptth"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.0.9"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int threads_arg;	/**< @brief Number of threads. (default='5').  */
  char * threads_orig;	/**< @brief Number of threads. original value given at command line.  */
  const char *threads_help; /**< @brief Number of threads. help description.  */
  char * url_arg;	/**< @brief URL of where to start..  */
  char * url_orig;	/**< @brief URL of where to start. original value given at command line.  */
  const char *url_help; /**< @brief URL of where to start. help description.  */
  int timeout_arg;	/**< @brief Timeout in seconds. (default='3').  */
  char * timeout_orig;	/**< @brief Timeout in seconds. original value given at command line.  */
  const char *timeout_help; /**< @brief Timeout in seconds. help description.  */
  int retries_arg;	/**< @brief Maximum retries. (default='2').  */
  char * retries_orig;	/**< @brief Maximum retries. original value given at command line.  */
  const char *retries_help; /**< @brief Maximum retries. help description.  */
  long max_document_size_arg;	/**< @brief Maximum size of a document in bytes. If a document is larger, it won't be parsed. (default='128000').  */
  char * max_document_size_orig;	/**< @brief Maximum size of a document in bytes. If a document is larger, it won't be parsed. original value given at command line.  */
  const char *max_document_size_help; /**< @brief Maximum size of a document in bytes. If a document is larger, it won't be parsed. help description.  */
  int allow_subdomains_flag;	/**< @brief Allow the crawler to go to URLs found on a sub-domain. (default=off).  */
  const char *allow_subdomains_help; /**< @brief Allow the crawler to go to URLs found on a sub-domain. help description.  */
  char ** allowed_domains_arg;	/**< @brief Allow the crawler to go to URLs found on other domains..  */
  char ** allowed_domains_orig;	/**< @brief Allow the crawler to go to URLs found on other domains. original value given at command line.  */
  unsigned int allowed_domains_min; /**< @brief Allow the crawler to go to URLs found on other domains.'s minimum occurreces */
  unsigned int allowed_domains_max; /**< @brief Allow the crawler to go to URLs found on other domains.'s maximum occurreces */
  const char *allowed_domains_help; /**< @brief Allow the crawler to go to URLs found on other domains. help description.  */
  char ** disallowed_paths_arg;	/**< @brief Disallow the crawler to go to these directories..  */
  char ** disallowed_paths_orig;	/**< @brief Disallow the crawler to go to these directories. original value given at command line.  */
  unsigned int disallowed_paths_min; /**< @brief Disallow the crawler to go to these directories.'s minimum occurreces */
  unsigned int disallowed_paths_max; /**< @brief Disallow the crawler to go to these directories.'s maximum occurreces */
  const char *disallowed_paths_help; /**< @brief Disallow the crawler to go to these directories. help description.  */
  char ** allowed_extensions_arg;	/**< @brief The crawler will only fetch documents with these extensions, but if no extension is found in an URL, this filter won't apply. Extensions have to start with a '.' (dot)..  */
  char ** allowed_extensions_orig;	/**< @brief The crawler will only fetch documents with these extensions, but if no extension is found in an URL, this filter won't apply. Extensions have to start with a '.' (dot). original value given at command line.  */
  unsigned int allowed_extensions_min; /**< @brief The crawler will only fetch documents with these extensions, but if no extension is found in an URL, this filter won't apply. Extensions have to start with a '.' (dot).'s minimum occurreces */
  unsigned int allowed_extensions_max; /**< @brief The crawler will only fetch documents with these extensions, but if no extension is found in an URL, this filter won't apply. Extensions have to start with a '.' (dot).'s maximum occurreces */
  const char *allowed_extensions_help; /**< @brief The crawler will only fetch documents with these extensions, but if no extension is found in an URL, this filter won't apply. Extensions have to start with a '.' (dot). help description.  */
  int keep_query_flag;	/**< @brief Keep the query part in the URL. (default=off).  */
  const char *keep_query_help; /**< @brief Keep the query part in the URL. help description.  */
  int no_color_flag;	/**< @brief Don't use color when outputing on the console. (default=off).  */
  const char *no_color_help; /**< @brief Don't use color when outputing on the console. help description.  */
  const char *http_only_help; /**< @brief Only fetch URLs with HTTP as scheme. help description.  */
  const char *https_only_help; /**< @brief Only fetch URLs with HTTPS as scheme. help description.  */
  const char *only_body_help; /**< @brief Only parse the <body>. help description.  */
  const char *only_head_help; /**< @brief Only parse the <head>. help description.  */
  const char *IPv6_help; /**< @brief Only resolve to IPv6 addresses. help description.  */
  const char *IPv4_help; /**< @brief Only resolve to IPv4 addresses. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int threads_given ;	/**< @brief Whether threads was given.  */
  unsigned int url_given ;	/**< @brief Whether url was given.  */
  unsigned int timeout_given ;	/**< @brief Whether timeout was given.  */
  unsigned int retries_given ;	/**< @brief Whether retries was given.  */
  unsigned int max_document_size_given ;	/**< @brief Whether max-document-size was given.  */
  unsigned int allow_subdomains_given ;	/**< @brief Whether allow-subdomains was given.  */
  unsigned int allowed_domains_given ;	/**< @brief Whether allowed-domains was given.  */
  unsigned int disallowed_paths_given ;	/**< @brief Whether disallowed-paths was given.  */
  unsigned int allowed_extensions_given ;	/**< @brief Whether allowed-extensions was given.  */
  unsigned int keep_query_given ;	/**< @brief Whether keep-query was given.  */
  unsigned int no_color_given ;	/**< @brief Whether no-color was given.  */
  unsigned int http_only_given ;	/**< @brief Whether http-only was given.  */
  unsigned int https_only_given ;	/**< @brief Whether https-only was given.  */
  unsigned int only_body_given ;	/**< @brief Whether only-body was given.  */
  unsigned int only_head_given ;	/**< @brief Whether only-head was given.  */
  unsigned int IPv6_given ;	/**< @brief Whether IPv6 was given.  */
  unsigned int IPv4_given ;	/**< @brief Whether IPv4 was given.  */

  int parsing_part_group_counter; /**< @brief Counter for group parsing_part */
  int resolving_ip_version_group_counter; /**< @brief Counter for group resolving_ip_version */
  int scheme_group_counter; /**< @brief Counter for group scheme */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
